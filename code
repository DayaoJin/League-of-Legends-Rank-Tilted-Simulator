import random
import matplotlib.pyplot as plt

# Player Data
class Player:
    def __init__(self, skill, mmr, rank, lp=50):
        self.skill = skill  # True player skill (hidden)
        self.mmr = mmr  # Hidden Matchmaking Rating
        self.rank = rank  # Rank (Iron, Bronze, etc.)
        self.lp = lp  # League Points (LP)
        self.tilt = 0  # Tracks tilt level
        self.streak = 0  # Win/Loss Streak Counter
        self.game_history = []  # Stores win/loss record

    def play_game(self):
        """Simulate a ranked game with matchmaking manipulation"""
        difficulty = self.mmr + (self.streak * 20)  # Streak-based rigging
        opponent_skill = random.randint(self.skill - 50, self.skill + 50)
        
        # Win probability based on rigged difficulty
        win_chance = max(10, min(90, 50 + (self.skill - difficulty) / 2))
        won = random.randint(1, 100) <= win_chance
        
        # LP Gains/Losses (Rigged)
        if won:
            lp_gain = random.randint(15, 20) if self.streak < 3 else random.randint(12, 15)
            self.lp += lp_gain
            self.mmr += random.randint(5, 10)
            self.streak += 1  # Increase win streak
        else:
            lp_loss = random.randint(18, 25) if self.streak > -3 else random.randint(22, 30)
            self.lp -= lp_loss
            self.mmr -= random.randint(5, 10)
            self.streak -= 1  # Increase loss streak
        
        # Track tilt (high LP loss, losing streaks increase tilt)
        if not won:
            self.tilt += (lp_loss - 15) + abs(self.streak * 2)
        else:
            self.tilt = max(0, self.tilt - 5)  # Winning decreases tilt slightly

        self.game_history.append(1 if won else 0)  # Store game result (1 = Win, 0 = Loss)

    def simulate_games(self, num_games):
        """Simulate a series of ranked games"""
        for _ in range(num_games):
            self.play_game()

        return self.game_history

# Simulate a player trapped in ranked
player = Player(skill=1500, mmr=1500, rank="Gold")
games = 100  # Simulate 100 games
history = player.simulate_games(games)

# Plot Results
plt.figure(figsize=(12, 6))
plt.plot(range(games), player.game_history, marker='o', linestyle='-', label='Win (1) / Loss (0)')
plt.title("Simulated Ranked Games with Forced 50% Win Rate")
plt.xlabel("Game Number")
plt.ylabel("Win (1) / Loss (0)")
plt.yticks([0, 1], ['Loss', 'Win'])
plt.grid()
plt.legend()
plt.show()

# Display Player Final Stats
print(f"Final LP: {player.lp}")
print(f"Final MMR: {player.mmr}")
print(f"Final Tilt Level: {player.tilt}")

